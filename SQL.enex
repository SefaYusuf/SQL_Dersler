<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20230114T105059Z" application="Evernote" version="10.49.4">
  <note>
    <title>SQL</title>
    <created>20221213T132733Z</created>
    <updated>20221214T104954Z</updated>
    <note-attributes>
      <author>Yusuf Sefa Sözkeser</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>Veritabani genellikle elektronik olarak bir bilgisayar sisteminde depolanan yapilandirilmis bilgi veya veriden olusan duzenli bir kolaksiyondur.Insanlarin gunumuzde beklentisi hiz ve guvenliktir.Veritabani genellikle bir Veritabani Yonetim Sistemi DBMS ile kontrol edilir.Veriler tablo seklinde saklanir.</div><h3>Faydalari</h3><div>Yuksek miktarda veri depolayabilir.Giris kolay ve kontrolludur.Dataya kolay ulasilabilir.Guvenlidir. Data uzerinde islem yapabilme kolayligi saglar.(CRUD)Creat,Read,Update,Delete.</div><h3>DBMS</h3><div>Veritabanlarini yonetmek, kullanmak,gelistirmek ve bakimini yapmak icin kullanilan yazilimlara denir. Database'e erisimi duzenler. CRUD islemlerini duzenler. Data guvenligini saglar. Sorgular olusturur ve bunlari iletir.Raporlar olusturur ve isletir.Uygulamayi kontrol eder. Diger uygulamalar ile iletisim saglar.</div><h3>Tablolar</h3><div>Veriler tablo halinde saklanir.Header baslik kismidir.Rows ve Columns lardan olusur.Header row ve column sayilmaz.Veri sayilmazlar.Headers'larda column isimleri bulunur.</div><h3>Relational Databases</h3><div>Veritabani olusturulurken iliskili olan tablolar arasinda baglar kurulur.Hiz ve zaman bakimindan daha elverislidir. Primary ve Foreign key ile yapilmaktadir.Baglantilara dikkat etmek gereklidir.Birbirlerini etkiler. Baglama zorunlulugu yoktur.Tablolar arasinda iliskiler net olmalidir.Tablolar arasinda gecis kolay olmalidir. Schema tablo ve iliskilerin butunune denir.  </div><h3>Non Relational Database</h3><div>SQL veritabani verilerle ilgilenirken Yapisal Sorgu Dili kullanir.NoSQL veritabani ise verilerle calisirken Yapilandirilmis Sorgu Dili kullanir.SQL veriyi nasil depolarim diye dusunur,NoSQL ise bu veriyi nasil ve nerede kullanacagim diye dusunur.NoSQL daha az yer kaplar ve daha hizlidir.</div><h2>SQL Komutlari</h2><div>4 ana gruba ayrilir.</div><h3>1.Veri Sorgulama Dili (Data Query Language) -- SELECT</h3><div>Veritabanindaki verileri alir. Bir kismini veya tamamini olarak kosullu alinabilir. Tabloyu gormek icin kullanilir.</div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>SELECT * FROM ogrenciler;    ---&gt; #Bir tablodaki butun verileri cagirmak istersek * sembolunu kullaniyoruz. </div><div>SELECT isim_soyisim,not_ort FROM ogrenciler;   ---&gt; #Bir tablodaki bazi sutunlari cagirmak istersek sutun adlarini belirtmemiz gerekir.</div></div><div>2. Veri Kullanma Dili (Data Manipulation Language) --INSERT, UPDATE, DELETE</div><div>Bu komutlar ile veritabanlarinda bulunan verilere islem yapilir. Yeni kayit ekleme, guncelleme ve silme islemleri yapilabilir.Tabloyu silme islemi yapmaz.Sadece verilerle ilgilenir.</div><h3>3.Veri Tanimlama Dili (Data Definition Language)  --CREATE, ALTER, DROP</h3><div>Bu komutlar ile veritabani ve tablolari olusturma, degistirme ve silme islemleri yapilir.Basliklari guncelleme yapilir.Tablolari siler.Tablolari degistirir.Verilerle ilgilenmez.</div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>CREATE TABLE ogrenciler</div><div>(</div><div>id char(4),</div><div>isim_soyisim varchar(50),</div><div>not_ort real,</div><div>kayit_tarih date	</div><div>);</div></div><div>Varolan bir tablodan da yeni bir tablo olusturabiliriz.Verilerini diger tablodan belirttigimiz sekilde alir. Hangi verileri belirtirsek o verilerle yeni tablo olusturur. Veri isimlerini gogru yazmaya dikkat edilmelidir.</div><div style="--en-codeblock:true;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>CREATE TABLE ogrenci_ortalama</div><div>AS</div><div>SELECT isim_soyisim,not_ort</div><div>FROM ogrenciler;</div></div><div>4.Veri Kontrol Dili (Data Control Language) -- GRANT, REVOKE</div><div>Bu komut ile kullanicilara veritabani ve tablolar icin yetki verilir veya geri alinir.</div><h3>Primary Key</h3><div>Bir veri tablosunda yer alan her satir icin bir tanimlayici gorevi gorur, kisitlamadir ve uniquedir.Primary key olarak tanimladigimiz columndaki degerler unique olmalidir.Aksi halde karisiklik soz konusu olacaktir.Bir tabloda tek bir Primary key olabilir.Eger uygun sutun bulamaz isek birden fazla sutundan olusan bir deger de tanimlayabiliriz.Primary key degeri Null deger alamaz veya bos birakilamaz. O sutundaki degerler tam olmalidir.Primary key her turlu datayi (String, integer) icerebilir.Her tabloda olmak zorunda degildir.</div><h3>Natural Key</h3><div>Gercek dunyadaki unique verileri ifade ediyorsa soz konusu olur.TC kimlik numarasi, email gibi her kisiye ozgu unique verilerden olusan keylere denir. </div><h3>Surrogate Key</h3><div>Genel olarak kayit eklemeden once uretilen sira numarasi gibi sayisal degerlere denir.</div><h3>Foreign Key</h3><div>Iki tablo arasinda relation olusturmak icin kullanilir.Baska veya ayni tablodaki Primary Key ile iliskilendirilerek iki tablo arasindaki baglanti kurulur.Bir tabloda birden fazla Foreign Key olabilir.Foreign key Primary Key aksine Null deger kabul eder.Foreign Key olarak tanimlanan sutunda tekrarli veriler olabilir.</div><h3>SQL Composite Key</h3><div>Birden fazla field'in kombinasyonu ile olusturulur.Tek basina bir sutun eger Primary key olma ozelligi tasimiyorsa birden fazla sutunun kombinasyonu ile yapilan birlesim sonucu olusan Primary keydir.</div><h3>Unique Key &amp; Primary Key</h3><div>Primary key bir tabloda bir tane olabilir Null deger kabul etmez. Unique Key ise bir tabloda birden fazla olabilir ve Null deger kabul eder.Her iki key de Dublication(Cift Kullanima) izin vermez.</div><h1>SQL Data Types</h1><h2>String Data Types</h2><h3>char(size)</h3><div>Max boyut 2000 byte'dir. Size database'e eklenecek karakter sayisidir. "char" data tipinde uzunlugu sabit datalari depolarUzunlugunu bildigimiz durumlarda daha cok kullanilir.</div><h3>nchar(size)</h3><div>Max boyut 2000 byte'dir. Size database'e eklenecek karakter sayisidir. "nchar" Unicode datalari depolamak icin kullanilir. Genellikle farkli dillerdeki karakterler icin kullanilir.</div><h3>varchar(size)</h3><div>Max boyut 4000 byte'dir. Size database'e eklenecek maximum karakter sayisidir. Degisken uzunluktaki stringler icin kullanilir. Girilecek verinin uzunlugunu bilmedigimiz durumlarda daha cok kullanilir.</div><h3>nvarchar(size)</h3><div>Max boyut 8000 byte'dir. Size database'e eklenecek maximum karakter sayisidir.Degisken uzunluktaki stringlerin unicode degerleri icin kullanilir. </div><h2>Numeric Data Types</h2><div>Tinyint(boyut),Smallint(boyut),Mediumint(boyut),Int,Bigint(boyut) bu type'lar mevcuttur.</div><h3>Int</h3><div>Belirli bir aralik icerisinde alabilecegi deger vardir.Boyut ile alabilecegi siniri belirtebiliriz.Kapladigi alan 4 byte'tir.</div><h3>real</h3><div>Ondalik sayilar icin kullanilir.Float degerleri ifade eder.</div><h3>Serial</h3><div>Girdigimiz datalara integer sira degeri atar.</div><h2>Date Data Types</h2><h3>Date</h3><div>Tarih ve zamani depolamak icin kullanilir.Saniyenin virgullu kismini da alir.Date yil, ay, gun, saat, dakika ve saniye icerir.Standart format ise "YYYY - MM - dd" dir.</div><h2>BLOB Data Types</h2><h3>BYTEA</h3><div>Bu data tipinde resim, video, ses gibi datalari binary formatina cevirerek depolar.</div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div></en-note>      ]]>
    </content>
  </note>
</en-export>
